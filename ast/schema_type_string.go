// Code generated by "stringer -output ast/schema_type_string.go -type SchemaType ast/schema_type.go"; DO NOT EDIT.

package ast

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[String-1]
	_ = x[Number-2]
	_ = x[Integer-4]
	_ = x[Object-8]
	_ = x[Array-16]
	_ = x[Boolean-32]
	_ = x[Null-64]
}

const (
	_SchemaType_name_0 = "StringNumber"
	_SchemaType_name_1 = "Integer"
	_SchemaType_name_2 = "Object"
	_SchemaType_name_3 = "Array"
	_SchemaType_name_4 = "Boolean"
	_SchemaType_name_5 = "Null"
)

var (
	_SchemaType_index_0 = [...]uint8{0, 6, 12}
)

func (i SchemaType) String() string {
	switch {
	case 1 <= i && i <= 2:
		i -= 1
		return _SchemaType_name_0[_SchemaType_index_0[i]:_SchemaType_index_0[i+1]]
	case i == 4:
		return _SchemaType_name_1
	case i == 8:
		return _SchemaType_name_2
	case i == 16:
		return _SchemaType_name_3
	case i == 32:
		return _SchemaType_name_4
	case i == 64:
		return _SchemaType_name_5
	default:
		return "SchemaType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
